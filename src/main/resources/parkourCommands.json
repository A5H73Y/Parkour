[
  {
    "command": "addjoinitem",
    "title": "Add Join Item to Course",
    "arguments": "[course] [material] [amount] [label] [unbreakable]",
    "example": "/pa addjoinitem tutorial elytra 1 \u00266Wings true",
    "description": "By default, joining a Course will give you a set of tools. You can provide the Player with additional ItemStacks when they join a Course, such as Elytra or Ender pearls for certain types of Courses etc. If no Course name is provided the ItemStack in the Player's hand will be added to ALL courses via the default JoinItems. Providing just a course name will add the ItemStack in the Player's hand to the Course's JoinItems. Providing the Material and Amount will add the defined ItemStack to the Course's JoinItems, with an optional label and unbreakable flag.",
    "permission": "parkour.admin.course",
    "commandGroup": "3",
    "consoleSyntax": "pac addjoinitem (course) (material) (amount) [label] [unbreakable]",
    "autoTabSyntax": "(course) (material) (amount) (label) [true,false]"
  },
  {
    "command": "admin",
    "title": "Plugin Administration commands",
    "arguments": "(addwhitelist / removewhitelist / disablecommand / enablecommand) (command)",
    "example": "/pa admin disablecommand cmds",
    "description": "Perform various administrator tasks around the plugin. Add / remove a whitelisted command that can be used whilst on a Course. Disable / enable a Parkour command which prevents players from using it.",
    "permission": "parkour.admin.*",
    "commandGroup": "5",
    "consoleSyntax": "pac admin (addwhitelist / removewhitelist / disablecommand / enablecommand) (command)",
    "autoTabSyntax": "[addwhitelist,removewhitelist,disablecommand,enablecommand] (command)"
  },
  {
    "command": "backup",
    "title": "Full Parkour Configuration Backup",
    "description": "Creates a timestamped zip backup of the current Parkour configuration folder, including any subfolders.",
    "consoleSyntax": "pac backup",
    "consoleOnly": true
  },
  {
    "command": "cache",
    "title": "Parkour Cache commands",
    "arguments": "[course / database / lobby / parkourkit / sound / all]",
    "example": "/pa cache all",
    "description": "The amount of results in each Cache can be listed when no argument is provided. Specifying which type of cache will clear it, specifying 'all' will clear all the caches.",
    "permission": "parkour.admin.*",
    "commandGroup": "5",
    "consoleSyntax": "pac cache [course / database / lobby / parkourkit / sound / all]",
    "autoTabSyntax": "[course,database,lobby,parkourkit,sound,all]"
  },
  {
    "command": "challenge",
    "title": "Course Challenge Management",
    "arguments": "(create / invite / start / terminate / info) (course) [wager]",
    "example": "/pa challenge create example 10",
    "description": "Create and invite Players to a Challenge. A Challenge is a group of players competing to complete the Course the fastest, a wager can be placed to make the Challenge more interesting. The Challenge host will create the Challenge for the Course, then invite all the players they wish to participate. When the Player is prepared they will be teleported to the start of the Course unable to move until the host starts the Challenge; a countdown will then initiate and the Challenge begins.",
    "commandGroup": "1",
    "autoTabSyntax": "[create,invite,start,terminate,info] {1:create=(course),1:invite=(player)} {1:create=(wager)}"
  },
  {
    "command": "challengeonly",
    "title": "Toggle Challenge Only status of Course",
    "arguments": "[course]",
    "example": "/pa challengeonly tutorial",
    "description": "Ability to prevent a Player from joining a Course unless they are currently in a Challenge.",
    "permission": "Parkour.Admin.Course",
    "commandGroup": "3",
    "consoleSyntax": "pac challengeonly (course)",
    "autoTabSyntax": "(course) (yesno)",
    "deprecated": "/pa setcourse (course) challengeonly [true/false]"
  },
  {
    "command": "checkpoint",
    "title": "Create (or overwrite) a Checkpoint",
    "arguments": "(course) [number]",
    "example": "/pa checkpoint example 1",
    "description": "Create a Checkpoint on the specified Course. Your exact location will be captured as the Checkpoint and a pressure plate will be placed for you. A checkpoint can be overwritten by providing the number you wish to overwrite, for example '/pa checkpoint (course) 2' will replace the existing Checkpoint with your current location.",
    "permission": "Parkour.Admin.Course",
    "commandGroup": "2",
    "autoTabSyntax": "(course) (checkpoint)",
    "deprecated": "/pa create checkpoint (course) [number]"
  },
  {
    "command": "cmds",
    "title": "Display Parkour Commands",
    "arguments": "[menu]",
    "example": "/pa cmds",
    "description": "Display the Parkour commands menu or the corresponding command group list. Each command group is grouped by their permission / functionality for example Create commands and Administration commands.",
    "commandGroup": "1",
    "consoleSyntax": "pac cmds",
    "autoTabSyntax": "[1,2,3,4,5,signs]"
  },
  {
    "command": "config",
    "title": "Display Config Entry",
    "arguments": "(config key)",
    "example": "/pa config Scoreboard.Enabled",
    "description": "Used as a debug tool to identify the value of a field in the config.yml. Will be used by support to identify any problems on the server. MySQL details are not visible.",
    "permission": "Server Operator",
    "commandGroup": "5",
    "consoleSyntax": "pac config Scoreboard.Enabled"
  },
  {
    "command": "course",
    "title": "Display Course information",
    "arguments": "(course)",
    "example": "/pa course tutorial",
    "description": "Display all the Course information and statistics, including the requirements to join and any rewards given on completion.",
    "commandGroup": "1",
    "consoleSyntax": "pac course (course)",
    "autoTabSyntax": "(course)"
  },
  {
    "command": "create",
    "title": "Create Parkour Objects",
    "arguments": "(course / checkpoint / kit / autostart / lobby) [argument] [argument]",
    "example": "/pa create course tutorial",
    "description": "Create the specified action. Courses will require a unique name and will be created in the Player's location. Checkpoints must have the course name provided, and can have an optional number to override. ParkourKits will require a unique name. Autostarts must have the course name provided and will be created at the Player's location. Creating a lobby without a name will set the default lobby, creating a lobby with a name will allow you to provide an optional minimum ParkourLevel requirement.",
    "permission": "parkour.basic.create",
    "commandGroup": "2",
    "autoTabSyntax": "[course,checkpoint,kit,autostart,lobby] {1:checkpoint=(course),1:autostart=(course),*=(value)} {1:lobby=(parkour-level),1:checkpoint=(override)}"
  },
  {
    "command": "createkit",
    "title": "Create ParkourKit",
    "example": "/pa createkit",
    "description": "A conversation will be started to allow you to create a new ParkourKit. This ParkourKit can be linked to a Course to override the default blocks. Each Material chosen must be unique, but many Materials can share the same action.",
    "permission": "Parkour.Admin.Course",
    "commandGroup": "2",
    "consoleSyntax": "pac createkit",
    "deprecated": "/pa create kit [name]"
  },
  {
    "command": "delete",
    "title": "Request Deletion Command",
    "arguments": "(course / checkpoint / lobby / kit / rank / leaderboardrow) (argument) [detail]",
    "example": "/pa delete course tutorial",
    "description": "The Delete command allows you to request to remove an entry from the Parkour plugin. A summary of the request, with any consequences, will be displayed to the user before they are asked to confirm the action. Each request will be validated and require confirmation before it is actioned.",
    "permission": "parkour.admin.delete",
    "commandGroup": "5",
    "consoleSyntax": "pac delete (course / checkpoint / lobby / kit / rank / leaderboardrow) (argument) [detail]",
    "autoTabSyntax": "[course,checkpoint,lobby,kit,rank,leaderboardrow] {1:course=(course),1:checkpoint=(course),1:lobby=(lobby),1:kit=(parkourkit),1:rank=(parkourlevel),1:leaderboardrow=(course)} {1:leaderboardrow=(row)}"
  },
  {
    "command": "economy",
    "title": "Display Economy information",
    "arguments": "(info / setprize / setfee)",
    "example": "/pa economy info",
    "description": "If you have linked Parkour to a compatible Economy plugin, you are able to set the fee to join a Course and set the prize for completing a Course.",
    "permission": "parkour.admin.*",
    "commandGroup": "5",
    "consoleSyntax": "pac economy (info / setprize / setfee)",
    "autoTabSyntax": "[info,setprize,setfee] {1:setprize=(course),1:setfee=(course)} {1:setprize=(amount),1:setfee=(amount)}"
  },
  {
    "command": "editkit",
    "title": "Edit ParkourKit",
    "example": "/pa editkit",
    "description": "A conversation will be started to allow you to edit an existing ParkourKit. You have the option to remove a Material or add a new Material with the corresponding action and related attributes.",
    "permission": "Parkour.Admin.Course",
    "commandGroup": "2",
    "consoleSyntax": "pac editkit",
    "deprecated": "/pa parkourkit edit [kit]"
  },
  {
    "command": "finish",
    "title": "Trigger Finish Course",
    "description": "Trigger the specified Player to request to finish the Course. This will not force a finish, simply trigger the finish event similar to walking on a Finish Block or using a Finish sign. Can be used to externally finish the Course for the Player.",
    "consoleSyntax": "pac finish (player)",
    "consoleOnly": true
  },
  {
    "command": "help",
    "title": "Display Parkour Command Help",
    "arguments": "(command)",
    "example": "/pa help join",
    "description": "A summary of the Command information can be presented to the User when requested, which includes help on the syntax and a usage example.",
    "commandGroup": "1",
    "autoTabSyntax": "(command)"
  },
  {
    "command": "info",
    "title": "Display Player Parkour information",
    "arguments": "[player]",
    "example": "/pa info A5H73Y",
    "description": "Display all the Player's Parkour statistics, which can include their current progress through a Course. When no Player is provided, it will display the current User's details.",
    "commandGroup": "1",
    "consoleSyntax": "pac info (player)",
    "autoTabSyntax": "(player)"
  },
  {
    "command": "invite",
    "title": "Invite Players to Challenge",
    "arguments": "(player...)",
    "example": "/pa invite A5H73Y steve4744 Notch",
    "description": "When you are a Challenge host, you can invite Players into the Challenge. Each invite will be validated before it is sent, and if accepted the Player will join the Challenge.",
    "permission": "parkour.basic.challenge",
    "commandGroup": "1",
    "autoTabSyntax": "(player) (player) (player) (player) (player) (player)",
    "deprecated": "/pa challenge invite (player...)"
  },
  {
    "command": "join",
    "title": "Join a Parkour Course",
    "arguments": "(course / courseId)",
    "example": "/pa join tutorial",
    "description": "You are able to join a Course using its unique name; each Course also has a unique numeric identifier (courseID) which can be used to join the Course instead of its name. Once you have joined a Course, you are in \u0027Parkour Mode\u0027, which allows you to interact with the ParkourKit and track your statistics.",
    "commandGroup": "1",
    "consoleSyntax": "pac join (course) (player)",
    "autoTabSyntax": "(course)"
  },
  {
    "command": "joinall",
    "title": "Display Join Courses Menu",
    "example": "/pa joinall",
    "description": "Display all the Parkour Courses available in a scrollable menu. Simply right click the Course entry to join it.",
    "permission": "parkour.basic.joinall",
    "commandGroup": "1"
  },
  {
    "command": "kit",
    "title": "Retrieve ParkourKit",
    "arguments": "[kit-name]",
    "example": "/pa kit firekit",
    "description": "Using this command you can fill your inventory with the Materials configured in the ParkourKit. Each Material will be labelled with its action and a Sign will be provided also. If you don\u0027t specify a ParkourKit set, it will use the Default blocks.",
    "permission": "parkour.basic.kit",
    "commandGroup": "2",
    "autoTabSyntax": "(parkourkit)",
    "deprecated": "/pa parkourkit give [kit-name]"
  },
  {
    "command": "leaderboard",
    "title": "Display Course leaderboards",
    "arguments": "[course] [amount] [scope]",
    "example": "/pa leaderboard tutorial 10 global",
    "description": "A conversation will be started to display the leaderboards you want, whether it\u0027s the best global or personal times. You can provide the required arguments for immediate results.",
    "permission": "parkour.basic.leaderboard",
    "commandGroup": "1",
    "consoleSyntax": "pac leaderboard (course) (amount)",
    "autoTabSyntax": "(course) (amount) [global,personal]"
  },
  {
    "command": "leave",
    "title": "Leave a Parkour Course",
    "example": "/pa leave",
    "description": "Leaving the Course you are currently playing will terminate all information tracking your current progress, and you will be teleported back to the Parkour Lobby by default.",
    "commandGroup": "1",
    "consoleSyntax": "pac leave (player)"
  },
  {
    "command": "leaveall",
    "title": "All Players leave Course",
    "description": "Force all online Parkour Players to leave the Course they are on.",
    "consoleSyntax": "pac leaveall",
    "consoleOnly": true
  },
  {
    "command": "linkkit",
    "title": "Link a Course to ParkourKit",
    "arguments": "(course) (kit)",
    "example": "/pa linkKit tutorial firekit",
    "description": "Each Course can be linked to a different ParkourKit, which are created using the \u0027/pa createKit\u0027 command. Once linked, each type of Material in the ParkourKit on that Course will be configured to the action set.",
    "permission": "Parkour.Admin.Course",
    "commandGroup": "3",
    "consoleSyntax": "pac linkkit (course) (kit)",
    "autoTabSyntax": "(course) (parkourkit)",
    "deprecated": "/pa setcourse (course) parkourkit (kit)"
  },
  {
    "command": "list",
    "title": "Display List Information",
    "arguments": "(courses / players / ranks / lobbies)",
    "example": "/pa list courses",
    "description": "This command can display all the Courses saved on the server in a page format, ordered by date of creation, each having their own unique numerical ID which can be used to join the Course. Display all the Players that are currently using the plugin, this includes which Course, and how many times they\u0027ve died. Display the available ParkourRanks to be unlocked, with the required ParkourLevel to achieve each. Display all custom lobbies available.",
    "commandGroup": "1",
    "consoleSyntax": "pac list (courses / players / ranks / lobbies)",
    "autoTabSyntax": "[courses,players,ranks,lobbies]"
  },
  {
    "command": "listkit",
    "title": "List ParkourKit information",
    "arguments": "[kit]",
    "example": "/pa listKit firekit",
    "description": "Display all the ParkourKits available by using the command without the argument. You can specify a ParkourKit name if you want to display each Material in the kit with the corresponding actions.",
    "permission": "Parkour.Basic.Kit",
    "commandGroup": "3",
    "consoleSyntax": "pac listkit [kit]",
    "autoTabSyntax": "(parkourkit)",
    "deprecated": "/pa parkourkit list [kit]"
  },
  {
    "command": "lobby",
    "title": "Teleport to a Parkour Lobby",
    "arguments": "[lobby]",
    "example": "/pa lobby",
    "description": "Teleport to the chosen Lobby. If a Lobby name is not specified it will take you to the default Lobby, otherwise it will attempt to join the Lobby specified in the argument. Note that some lobbies can have a minimum ParkourLevel requirement to join.",
    "commandGroup": "1",
    "autoTabSyntax": "(lobby)"
  },
  {
    "command": "manualcheckpoint",
    "title": "Set Player Manual Checkpoint",
    "example": "/pa manualcheckpoint",
    "description": "Allows the Player to mark their current position as their manual checkpoint. This will allow external plugins to mark the Player's checkpoint for them using the command. The use of manualcheckpoints must be enabled on the Course to allow this command.",
    "commandGroup": "4",
    "consoleSyntax": "pac manualcheckpoint (player)",
    "deprecated": "/pa session manualcheckpoint"
  },
  {
    "command": "material",
    "title": "Display Material information",
    "arguments": "[material]",
    "example": "/pa material",
    "description": "Display the matching Material information. The name of the Material in the Player's hand will be displayed which can be used throughout the plugin, if an argument is provided and will display if a match was found. All the names are server dependent, so if you have an older server version the names may differ.",
    "commandGroup": "5"
  },
  {
    "command": "parkourkit",
    "title": "ParkourKit commands",
    "arguments": "(create / edit / validate / list / link / give) [parkourkit] [value]",
    "example": "/pa parkourkit list default",
    "description": "Perform various actions with ParkourKits. The additional value argument is only required for the link command which will be the Course to link to.",
    "permission": "parkour.admin.course",
    "commandGroup": "5",
    "autoTabSyntax": "[create,edit,validate,list,link,give] {1:create=(name),*=(parkourkit)} {1:link=(course)}"
  },
  {
    "command": "perms",
    "title": "Display Parkour Permissions",
    "example": "/pa perms",
    "description": "Each of the Parkour permissions you have been granted will be displayed in a list format. If you have the wildcard '*' for that group, all child commands will be included.",
    "commandGroup": "1"
  },
  {
    "command": "placeholder",
    "title": "Parse Parkour Placeholder",
    "arguments": "(placeholder)",
    "example": "/pa placeholder %parkour_global_version%",
    "description": "Shortcut command to evaluate the Placeholder value using PlaceholderAPI. Validation will be done to ensure the Parkour plugin has successfully integrated with Placeholders first. The command will evaluate the equivalent to '/papi parse me (placeholder)'.",
    "permission": "parkour.admin.*",
    "commandGroup": "5",
    "consoleSyntax": "pac placeholder (placeholder) (player)",
    "autoTabSyntax": "%placeholder%"
  },
  {
    "command": "prize",
    "title": "Configure Course Prize",
    "arguments": "(course)",
    "example": "/pa prize tutorial",
    "description": "A conversation will be started which allows you to configure the Course's prize exactly how you want. If a command is chosen you will have a chance to test the command, proving it will work.",
    "permission": "Parkour.Admin.Prize",
    "commandGroup": "3",
    "consoleSyntax": "pac prize (course)",
    "autoTabSyntax": "(course)",
    "deprecated": "/pa setcourse (course) prize"
  },
  {
    "command": "quiet",
    "title": "Toggle Quiet Mode",
    "example": "/pa quiet",
    "description": "If non-essential Parkour messages are becoming annoying i.e. Seeing \u0027You died! ...\u0027 regularly, you can toggle visibility of these messages using this command. This includes any title messages which notify the Player.",
    "commandGroup": "4"
  },
  {
    "command": "ready",
    "title": "Set Course ready status",
    "arguments": "[course]",
    "example": "/pa ready tutorial",
    "description": "When you first create a Course, it will not be join-able until it has been marked as 'ready' by its creator. The command will toggle the Course's ready status. A Course should only be marked as ready when other Players can join it, as it will be added to the Cache for performance.",
    "permission": "parkour.admin.course",
    "commandGroup": "3",
    "autoTabSyntax": "(course)",
    "deprecated": "/pa setcourse (course) ready [true/false]"
  },
  {
    "command": "recreate",
    "title": "Recreate Course Database",
    "example": "/pa recreate",
    "description": "This command can be used to fix the database if there are missing Courses that haven\u0027t been synchronised with the server. This is executed on server startup.",
    "permission": "parkour.admin.*",
    "commandGroup": "5",
    "consoleSyntax": "pac recreate"
  },
  {
    "command": "reload",
    "title": "Reload the Parkour Configuration.",
    "example": "/pa reload",
    "description": "Reload the Parkour Configuration files. This is the recommended way to load any changes made to any config files as some hosts restart the server without allowing Parkour to reload the config files. Some configuration changes, like the Scoreboard, require a server restart after the change has been made.",
    "permission": "parkour.admin.*",
    "commandGroup": "5",
    "consoleSyntax": "pac reload"
  },
  {
    "command": "request",
    "title": "Request a Feature / Report a Bug",
    "example": "/pa request",
    "description": "Do you have an idea for the plugin or found a bug you want to report? Click the link provided to navigate to the Parkour support Discord.",
    "commandGroup": "2"
  },
  {
    "command": "reset",
    "title": "Request Reset Command",
    "arguments": "(course / player / leaderboard / prize) (argument)",
    "example": "/pa reset player A5H73Y",
    "description": "The Reset command allows you to request to reset an entry from the Parkour plugin. A summary of the request, with any consequences, will be displayed to the user before they are asked to confirm the action. Each request will be validated and require confirmation before it is actioned.",
    "permission": "parkour.admin.reset",
    "commandGroup": "5",
    "consoleSyntax": "pac reset (course / player / leaderboard / prize) (argument)",
    "autoTabSyntax": "[course,player,leaderboard,prize] {1:course=(course),1:leaderboard=(course),1:prize=(course),1:player=(player)}"
  },
  {
    "command": "respawn",
    "title": "Respawn to last Checkpoint",
    "example": "/pa respawn",
    "description": "While on a Course, you can respawn to the last Checkpoint achieved.",
    "commandGroup": "1",
    "consoleSyntax": "pac respawn (player)",
    "deprecated": "/pa session respawn"
  },
  {
    "command": "restart",
    "title": "Restart a Parkour Course",
    "example": "/pa restart",
    "description": "While on a Course, you can restart your progress which will reset all current progress and start the Course again.",
    "commandGroup": "1",
    "consoleSyntax": "pac restart (player)",
    "deprecated": "/pa session restart"
  },
  {
    "command": "resumable",
    "title": "Toggle Resumable status of Course",
    "arguments": "[course]",
    "example": "/pa resumable tutorial",
    "description": "Toggle the ability for the Player's progress on the Course to be resumed on the next time they join the Course.",
    "permission": "Parkour.Admin.Course",
    "commandGroup": "3",
    "consoleSyntax": "pac resumable (course)",
    "autoTabSyntax": "(course)",
    "deprecated": "/pa setcourse (course) resumable [true/false]"
  },
  {
    "command": "rewarddelay",
    "title": "Reward Delay for Course",
    "arguments": "(course) (hours)",
    "example": "/pa rewarddelay tutorial 1",
    "description": "Delay a Course Reward before it can be rewarded again. The delay is calculated based on hours, for example '0.5' would be 30 minutes and '48' will be two full days before the player can be rewarded again for the same Course.",
    "permission": "Parkour.Admin.Course",
    "commandGroup": "3",
    "consoleSyntax": "pac rewarddelay (course) (hours)",
    "autoTabSyntax": "(course) (hours)",
    "deprecated": "/pa setcourse (course) rewarddelay (hours)"
  },
  {
    "command": "rewardlevel",
    "title": "Reward a ParkourLevel",
    "arguments": "(course) (level)",
    "example": "/pa rewardlevel tutorial 5",
    "description": "You can reward a Player with a ParkourLevel on the completion of a Course, which will allow them to unlock new Courses which have a minimum level requirement to join. Their level is not overwritten if their current level is higher than the reward level.",
    "permission": "Parkour.Admin.Course",
    "commandGroup": "3",
    "consoleSyntax": "pac rewardlevel (course) (level)",
    "autoTabSyntax": "(course) (level)",
    "deprecated": "/pa setcourse (course) rewardlevel (level)"
  },
  {
    "command": "rewardleveladd",
    "title": "Reward Increase to ParkourLevel",
    "arguments": "(course) (amount)",
    "example": "/pa rewardleveladd tutorial 2",
    "description": "You can reward a Player with an addition to their ParkourLevel on the completion of a Course, which will allow them to unlock new Courses which have a minimum level requirement to join. The amount is added to their current level.",
    "permission": "Parkour.Admin.Course",
    "commandGroup": "3",
    "consoleSyntax": "pac rewardleveladd (course) (amount)",
    "autoTabSyntax": "(course) (amount)",
    "deprecated": "/pa setcourse (course) rewardleveladd (amount)"
  },
  {
    "command": "rewardonce",
    "title": "Toggle Reward Once status of Course",
    "arguments": "[course]",
    "example": "/pa rewardonce tutorial",
    "description": "Prevent a Player from receiving a reward multiple times for completing a Course, by only allowing them to receive the reward the first time they complete the Course.",
    "permission": "Parkour.Admin.Course",
    "commandGroup": "3",
    "consoleSyntax": "pac rewardonce (course)",
    "autoTabSyntax": "(course)",
    "deprecated": "/pa setcourse (course) rewardonce [true/false]"
  },
  {
    "command": "rewardparkoins",
    "title": "Reward Parkoins",
    "arguments": "(course) (amount)",
    "example": "/pa rewardparkoins tutorial 10",
    "description": "You can reward a Player with Parkoins for completing a Course. These can be spent using external plugins to unlock additional content which would be unobtainable without the minimum amount of Parkoins required.",
    "permission": "Parkour.Admin.Course",
    "commandGroup": "3",
    "consoleSyntax": "pac rewardparkoins (course) (amount)",
    "autoTabSyntax": "(course) (amount)",
    "deprecated": "/pa setcourse (course) rewardparkoins (amount)"
  },
  {
    "command": "rewardrank",
    "title": "Reward a ParkourRank for ParkourLevel",
    "arguments": "(level) (rank)",
    "example": "/pa rewardrank 4 \u00264Pro",
    "description": "You can link a ParkourLevel to a ParkourRank, which would display beside their name if you enable the Parkour Chat Prefix setting. This would allow you to differentiate each ParkourLevel a Player is, based on their ParkourRank.",
    "permission": "parkour.admin.course",
    "commandGroup": "5",
    "consoleSyntax": "pac rewardrank (level) (rank)",
    "autoTabSyntax": "(level) (rank)"
  },
  {
    "command": "session",
    "title": "Parkour session actions",
    "arguments": "(hideall / restart / back / leave / manualcheckpoint / quiet)",
    "example": "/pa session restart",
    "description": "Perform session actions using their command counterparts.",
    "commandGroup": "4",
    "consoleSyntax": "pac session (hideall / restart / back / leave / manualcheckpoint / quiet) (player)",
    "autoTabSyntax": "[hideall,restart,back,leave,manualcheckpoint,quiet]"
  },
  {
    "command": "setautostart",
    "title": "Create AutoStart for Course",
    "arguments": "(course)",
    "example": "/pa setautostart tutorial",
    "description": "Places a pressure plate that will automatically trigger a join of the Course specified in the argument. A configured Material will appear below the pressure plate to identify it, and for better performance.",
    "permission": "parkour.admin.course",
    "commandGroup": "2",
    "autoTabSyntax": "(course)",
    "deprecated": "/pa create autostart (course)"
  },
  {
    "command": "setcheckpoint",
    "title": "Manually Set Player's Checkpoint",
    "description": "Allows the Player's checkpoint to be manually set using a console command. This will allow multiple external actions to increase the player's current checkpoint. This command will respect the value of the sequential checkpoints config.",
    "consoleSyntax": "pac setcheckpoint (player) (checkpoint)",
    "consoleOnly": true
  },
  {
    "command": "setcourse",
    "title": "Set Course Attributes",
    "arguments": "(course) (challengeonly / creator / dieinliquid / dieinvoid / displayname / hasfalldamage / linkedcourse / linkedlobby / manualcheckpoints / maxdeaths / maxfallticks / maxtime / minimumlevel / parkourkit / parkourmode / playerlimit / ready / resumable / rewarddelay / rewardlevel / rewardleveladd / rewardonce / rewardparkoins / autostart / prize / rename / resetlink / start / message / command) [value]",
    "example": "/pa setcourse tutorial creator A5H73Y",
    "description": "Quickly set Course attributes using a simple command. If a message or command is provided, a valid parkour event type argument must be provided and the following arguments will be combined to make the final event message / command; colour codes are supported.",
    "permission": "parkour.admin.course",
    "commandGroup": "3",
    "consoleSyntax": "pac setcourse (course) (challengeonly / creator / dieinliquid / dieinvoid / displayname / hasfalldamage / linkedcourse / linkedlobby / manualcheckpoints / maxdeaths / maxfallticks / maxtime / minimumlevel / parkourkit / parkourmode / playerlimit / ready / resumable / rewarddelay / rewardlevel / rewardleveladd / rewardonce / rewardparkoins / autostart / prize / rename / resetlink / start / message / command) [value]",
    "autoTabSyntax": "(course) [challengeonly,creator,dieinliquid,dieinvoid,displayname,hasfalldamage,linkedcourse,linkedlobby,manualcheckpoints,maxdeaths,maxfallticks,maxtime,minimumlevel,parkourkit,parkourmode,playerlimit,ready,resumable,rewarddelay,rewardlevel,rewardleveladd,rewardonce,rewardparkoins,autostart,prize,rename,resetlink,start,message,command] {2:challengeonly=(truefalse),2:creator=(player),2:dieinliquid=(truefalse),2:dieinvoid=(truefalse),2:hasfalldamage=(truefalse),2:linkedcourse=(course),2:linkedlobby=(lobby),2:manualcheckpoints=(truefalse),2:parkourkit=(parkourkit),2:parkourmode=(nothing),2:ready=(truefalse),2:resumable=(truefalse),2:rewardonce=(truefalse),2:autostart=(truefalse),2:prize=(nothing),2:resetlink=(nothing),2:start=(nothing),2:message=(parkourevent),2:command=(parkourevent),*=(value)} {2:message=(value...),2:command=(value...)}"
    },
  {
    "command": "setcreator",
    "title": "Set Creator of a Course",
    "arguments": "(course) (player)",
    "example": "/pa setcreator tutorial A5H73Y",
    "description": "The creator of the Course will be overwritten to what you\u0027ve specified. Helpful if an Admin has to setup the Course which a non-admin Player created. The creator of a Course will have certain permissions for that Course, regardless of if they are an Admin.",
    "permission": "Parkour.Admin.Course",
    "commandGroup": "3",
    "autoTabSyntax": "(course) (player)",
    "deprecated": "/pa setcourse (course) creator (player)"
  },
  {
    "command": "setlevel",
    "title": "Set Player\u0027s ParkourLevel",
    "arguments": "(player) (level)",
    "example": "/pa setlevel A5H73Y 10",
    "description": "You are able to manually set a Player\u0027s ParkourLevel. Used to quickly test you\u0027ve set up the ParkourLevel requirements correctly, or to reward a Player manually.",
    "permission": "Parkour.Admin.*",
    "commandGroup": "4",
    "autoTabSyntax": "(player) (level)",
    "deprecated": "/pa setplayer (player) level (level)"
  },
  {
    "command": "setlobby",
    "title": "Set a Parkour Lobby",
    "arguments": "[name] [level-required]",
    "example": "/pa setlobby city 10",
    "description": "Create a Lobby where you are stood, specifying a name and an optional ParkourLevel requirement to join. You are able to link Courses to a Lobby after completion.",
    "permission": "parkour.admin.*",
    "commandGroup": "2",
    "autoTabSyntax": "(lobby-name) (level-required)",
    "deprecated": "/pa create lobby [name] [level-required]"
  },
  {
    "command": "setlobbycommand",
    "title": "Add a Parkour Lobby Command",
    "arguments": "(lobby) (command)",
    "example": "/pa setlobbycommand default give %PLAYER% minecraft:diamond 1",
    "description": "Add a command to be executed when the Player teleports to the specified Lobby.",
    "permission": "parkour.admin.*",
    "commandGroup": "2",
    "autoTabSyntax": "(lobby) (command...)"
  },
  {
    "command": "setmaxdeaths",
    "title": "Set Maximum Deaths for Course",
    "arguments": "(course) (amount)",
    "example": "/pa setmaxdeaths tutorial 5",
    "description": "By default, a Course does not have a maximum amount of deaths. However, you can enforce a limit on the amount of deaths the Player can accumulate before being forced to leave the Course.",
    "permission": "Parkour.Admin.Course",
    "commandGroup": "3",
    "autoTabSyntax": "(course) (amount)",
    "deprecated": "/pa setcourse (course) maxdeaths (amount)"
  },
  {
    "command": "setmaxtime",
    "title": "Set Time Limit for Course",
    "arguments": "(course) (seconds)",
    "example": "/pa setmaxtime tutorial 30",
    "description": "By default, a Course does not have a maximum time limit. However, you can enforce a time limit the Course must be completed by before being forced to leave the Course.",
    "permission": "Parkour.Admin.Course",
    "commandGroup": "3",
    "autoTabSyntax": "(course) (seconds)",
    "deprecated": "/pa setcourse (course) maxtime (seconds)"
  },
  {
    "command": "setminimumlevel",
    "title": "Set Minimum ParkourLevel for Course",
    "arguments": "(course) (level)",
    "example": "/pa setminimumlevel tutorial 5",
    "description": "By default, a Course does not have a minimum ParkourLevel requirement to join. However, if you want to enforce the progression of Parkour Courses, you can require the Player to have a ParkourLevel greater than or equal to the minimum ParkourLevel specified.",
    "permission": "Parkour.Admin.Course",
    "commandGroup": "3",
    "autoTabSyntax": "(course) (level)",
    "deprecated": "/pa setcourse (course) minimumlevel (level)"
  },
  {
    "command": "setmode",
    "title": "Set ParkourMode for Course",
    "arguments": "(course)",
    "example": "/pa setmode tutorial",
    "description": "By default, a Course does not have a ParkourMode attached. Each ParkourMode can affect the interaction with the Course, an example being the \u0027Freedom\u0027 mode allows you to create and load your own checkpoints. Starts a conversation that lets you configure the ParkourMode for the Course, some options require additional details.",
    "permission": "Parkour.Admin.Course",
    "commandGroup": "3",
    "consoleSyntax": "pac setmode (course)",
    "autoTabSyntax": "(course)",
    "deprecated": "/pa setcourse (course) parkourmode (mode)"
  },
  {
    "command": "setplayer",
    "title": "Set Player Attributes",
    "arguments": "(player) (level / leveladd / rank) (value)",
    "example": "/pa setplayer A5H73Y level 123",
    "description": "Quickly set Player attributes using a simple command. Manually set the ParkourLevel or ParkourRank of a Player.",
    "permission": "parkour.admin.course",
    "commandGroup": "4",
    "consoleSyntax": "pac setplayer (player) (level / leveladd / rank) (value)",
    "autoTabSyntax": "(player) [level,leveladd,rank] (value)"
  },
  {
    "command": "setplayerlimit",
    "title": "Set a Player limit for the Course",
    "arguments": "(course) (amount)",
    "example": "/pa setplayerlimit tutorial 1",
    "description": "You are able to limit the number of concurrent Players on a Course.",
    "permission": "Parkour.Admin.*",
    "commandGroup": "3",
    "consoleSyntax": "pac setplayerlimit (course) (amount)",
    "autoTabSyntax": "(course) (amount)",
    "deprecated": "/pa setcourse (course) playerlimit (amount)"
  },
  {
    "command": "setrank",
    "title": "Set Player\u0027s ParkourRank",
    "arguments": "(player) (rank)",
    "example": "/pa setrank A5H73Y \u00266Expert",
    "description": "You are able to manually set a Player\u0027s ParkourRank. This will instantly update their chat prefix.",
    "permission": "Parkour.Admin.*",
    "commandGroup": "4",
    "autoTabSyntax": "(player) (rank)",
    "deprecated": "/pa setplayer (player) rank (rank)"
  },
  {
    "command": "setstart",
    "title": "Overwrite Start of a Course",
    "arguments": "[course]",
    "example": "/pa setstart",
    "description": "The start of the specified Course will be overwritten to your current position, rather than having to recreate the Course.",
    "permission": "Parkour.Admin.Course",
    "commandGroup": "3",
    "autoTabSyntax": "(course)",
    "deprecated": "/pa setcourse (course) start"
  },
  {
    "command": "settings",
    "title": "Display Course Settings GUI",
    "arguments": "(course)",
    "example": "/pa settings example",
    "description": "Open the Course Settings GUI which will allow you to quickly modify any Course settings without the need for commands. Some options may require a text input once chosen.",
    "permission": "parkour.admin.*",
    "commandGroup": "3",
    "autoTabSyntax": "(course)"
  },
  {
    "command": "sql",
    "title": "Display SQL information",
    "example": "/pa sql",
    "description": "Display the SQL information of the server connected to the database.",
    "permission": "parkour.admin.*",
    "commandGroup": "5",
    "consoleSyntax": "pac sql"
  },
  {
    "command": "test",
    "title": "Toggle Parkour Test Mode",
    "arguments": "[kitName]",
    "example": "/pa test firekit",
    "description": "Test Mode can be toggled on and off, this will simulate being on a generic Parkour Course. The position you start Test Mode will act as the starting point. If you specify a ParkourKit this will be simulated, otherwise the default ParkourKit will be used.",
    "permission": "parkour.admin.testmode",
    "commandGroup": "3",
    "autoTabSyntax": "(parkourkit)"
  },
  {
    "command": "tp",
    "title": "Teleport to Course",
    "arguments": "(course)",
    "example": "/pa tp tutorial",
    "description": "Teleport to the start of the chosen Course. This will NOT activate \u0027Parkour Mode\u0027, but simply teleport you to the beginning of the Course.",
    "permission": "parkour.basic.tp",
    "commandGroup": "3",
    "autoTabSyntax": "(course)"
  },
  {
    "command": "tpc",
    "title": "Teleport to Course Checkpoint",
    "arguments": "(course) (point)",
    "example": "/pa tpc tutorial 2",
    "description": "Teleport to the chosen checkpoint on the Course. This will NOT activate \u0027Parkour Mode\u0027, but simply teleport you to the chosen checkpoint on the Course.",
    "permission": "parkour.basic.tpc",
    "commandGroup": "3",
    "autoTabSyntax": "(course) (checkpoint)"
  },
  {
    "command": "tutorial",
    "title": "Display links to tutorials",
    "example": "/pa tutorial",
    "description": "If you wish to learn from the official Parkour tutorials, click the link to be navigated to the documentation website.",
    "commandGroup": "1"
  },
  {
    "command": "validatekit",
    "title": "Validate ParkourKit",
    "arguments": "[kitName]",
    "example": "/pa validateKit firekit",
    "description": "You can validate a ParkourKit to find out if any problems has originated from manually editing a ParkourKit, or something has gone wrong.",
    "permission": "Parkour.Admin.Course",
    "commandGroup": "3",
    "consoleSyntax": "pac validatekit [kitName]",
    "autoTabSyntax": "(parkourkit)",
    "deprecated": "/pa parkourkit validate [kit]"
  },
  {
    "command": "version",
    "title": "Display Parkour information",
    "example": "/pa version",
    "description": "Display the currently installed Parkour version and any additional information for support.",
    "commandGroup": "1",
    "consoleSyntax": "pac version"
  }
]
